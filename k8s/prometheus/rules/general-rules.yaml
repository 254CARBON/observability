apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: observability
# Recording rules for aggregations used by dashboards/alerts. These reduce
# query cost and centralize naming for gateway and pipeline services.
data:
  general-rules.yaml: |
    groups:
    - name: general
      rules:
      # Gateway RED metrics aggregation
      - record: gateway:http_requests:rate5m
        expr: rate(gateway_http_requests_total[5m])
        labels:
          service: gateway
      
      - record: gateway:http_requests:rate15m
        expr: rate(gateway_http_requests_total[15m])
        labels:
          service: gateway
      
      - record: gateway:http_request_duration_seconds:rate5m
        expr: rate(gateway_http_request_duration_seconds_sum[5m]) / rate(gateway_http_request_duration_seconds_count[5m])
        labels:
          service: gateway
      
      # Error rate calculations
      - record: gateway:http_errors:rate5m
        expr: rate(gateway_http_requests_total{status_code=~"5.."}[5m])
        labels:
          service: gateway
      
      - record: gateway:http_error_rate:ratio5m
        expr: rate(gateway_http_requests_total{status_code=~"5.."}[5m]) / rate(gateway_http_requests_total[5m])
        labels:
          service: gateway
      
      # Latency percentiles
      - record: gateway:http_request_duration_seconds:p95
        expr: histogram_quantile(0.95, rate(gateway_http_request_duration_seconds_bucket[5m]))
        labels:
          service: gateway
      
      - record: gateway:http_request_duration_seconds:p99
        expr: histogram_quantile(0.99, rate(gateway_http_request_duration_seconds_bucket[5m]))
        labels:
          service: gateway

      # Served cache warming metrics
      - record: gateway:served_cache_warm_hits:rate5m
        expr: rate(gateway_served_cache_warm_total{result="hit"}[5m])
        labels:
          service: gateway

      - record: gateway:served_cache_warm_errors:rate5m
        expr: rate(gateway_served_cache_warm_total{result="error"}[5m])
        labels:
          service: gateway

      - record: gateway:served_cache_warm_duration_seconds:p95
        expr: histogram_quantile(0.95, sum by (projection_type, le) (rate(gateway_served_cache_warm_duration_seconds_bucket[5m])))
        labels:
          service: gateway

      - record: gateway:served_projection_age_seconds:p95
        expr: histogram_quantile(0.95, sum by (projection_type, le) (rate(gateway_served_projection_age_seconds_bucket[5m])))
        labels:
          service: gateway

      # Task Manager service metrics (Access)
      - record: task_manager:http_requests:rate5m
        expr: sum by (job) (rate(http_requests_total{job="task-manager"}[5m]))
        labels:
          service: task-manager

      - record: task_manager:http_error_rate:ratio5m
        expr: |
          sum(rate(http_requests_total{job="task-manager", status_code=~"5.."}[5m]))
          /
          clamp_min(sum(rate(http_requests_total{job="task-manager"}[5m])), 0.001)
        labels:
          service: task-manager

      - record: task_manager:http_request_duration_seconds:p95
        expr: histogram_quantile(0.95, sum by (le) (rate(http_request_duration_seconds_bucket{job="task-manager"}[5m])))
        labels:
          service: task-manager

      - record: task_manager:errors:rate5m
        expr: sum(rate(errors_total{service="task-manager"}[5m]))
        labels:
          service: task-manager

      - record: task_manager:business_events:rate5m
        expr: sum(rate(business_events_total{service="task-manager"}[5m]))
        labels:
          service: task-manager
      
      # Data pipeline metrics
      - record: ingestion:connector_runs:rate5m
        expr: rate(ingestion_connector_run_duration_seconds_count[5m])
        labels:
          service: ingestion
      
      - record: ingestion:connector_duration:p95
        expr: histogram_quantile(0.95, rate(ingestion_connector_run_duration_seconds_bucket[5m]))
        labels:
          service: ingestion
      
      - record: normalization:records_processed:rate5m
        expr: rate(normalization_records_processed_total[5m])
        labels:
          service: normalization

      - record: normalization:messages_processed:rate5m
        expr: sum(rate(normalization_messages_processed_total[5m]))
        labels:
          service: normalization

      - record: normalization:messages_processed_by_status:rate5m
        expr: sum by (status) (rate(normalization_messages_processed_total[5m]))
        labels:
          service: normalization

      - record: normalization:errors:rate5m
        expr: sum(rate(normalization_errors_total[5m]))
        labels:
          service: normalization

      - record: normalization:error_ratio:ratio5m
        expr: |
          sum(rate(normalization_errors_total[5m]))
          /
          clamp_min(sum(rate(normalization_messages_processed_total[5m])), 0.001)
        labels:
          service: normalization

      - record: normalization:processing_duration_seconds:p95
        expr: histogram_quantile(0.95, sum by (le) (rate(normalization_processing_duration_seconds_bucket[5m])))
        labels:
          service: normalization

      - record: normalization:dlq_messages:rate5m
        expr: sum(rate(normalization_messages_processed_total{status=~"failed|dlq"}[5m]))
        labels:
          service: normalization
      
      # ML inference metrics
      - record: ml:inference_latency:p95
        expr: histogram_quantile(0.95, rate(model_serving_inference_latency_seconds_bucket[5m]))
        labels:
          service: ml
      
      - record: ml:inference_errors:rate5m
        expr: rate(model_serving_inference_errors_total[5m])
        labels:
          service: ml
      
      # Infrastructure metrics
      - record: infra:clickhouse_query_duration:p95
        expr: histogram_quantile(0.95, rate(clickhouse_query_duration_seconds_bucket[5m]))
        labels:
          service: clickhouse
      
      # Cardinality reduction - hash high-cardinality labels
      - record: gateway:http_requests_by_endpoint:rate5m
        expr: rate(gateway_http_requests_total[5m])
        labels:
          service: gateway
        # Note: endpoint label will be hashed in relabel_configs
