apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: observability
# OpenTelemetry Collector configuration
# - Receives OTLP from apps
# - Exports traces to Tempo and metrics to Prometheus endpoint
# - Applies resource/attribute filtering for cost and compliance
data:
  otel-collector.yaml: |
    receivers:
      # OTLP receiver for traces and metrics
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      # Prometheus scraping
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: ['localhost:8888']
      
      # Host metrics
      hostmetrics:
        collection_interval: 10s
        scrapers:
          cpu:
          memory:
          disk:
          network:
    
    processors:
      # Batch processor for efficiency
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      # Memory limiter to prevent OOM
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
        check_interval: 5s
      
      # Resource processor to add service attributes
      resource:
        attributes:
          - key: deployment.environment
            value: "local"
            action: upsert
          - key: service.version
            from_attribute: version
            action: upsert
      
      # Attributes processor for cost optimization
      attributes:
        actions:
          # Hash high-cardinality labels
          - key: instrument_id
            action: hash
          # Drop unnecessary attributes
          - key: http.user_agent
            action: delete
          - key: http.request.header.authorization
            action: delete
      
      # Sampling processor (future enhancement)
      probabilistic_sampler:
        sampling_percentage: 10.0
      
      # Tail sampling processor (future enhancement)
      tail_sampling:
        decision_wait: 10s
        num_traces: 50000
        expected_new_traces_per_sec: 10
        policies:
          - name: errors
            type: status_code
            status_code:
              status_codes: [ERROR]
          - name: slow
            type: latency
            latency:
              threshold_ms: 1000
          - name: baseline
            type: probabilistic
            probabilistic:
              sampling_percentage: 10
    
    exporters:
      # Prometheus metrics export
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: "otel"
        const_labels:
          cluster: "254carbon"
      
      # Tempo trace export
      otlp/tempo:
        endpoint: tempo:4317
        tls:
          insecure: true
      
      # Prometheus remote write (future scaling)
      prometheusremotewrite:
        endpoint: "http://prometheus:9090/api/v1/write"
        external_labels:
          cluster: "254carbon"
      
      # Logging exporter for debugging
      logging:
        loglevel: info
        sampling_initial: 5
        sampling_thereafter: 200
    
    service:
      pipelines:
        # Metrics pipeline
        metrics:
          receivers: [otlp, prometheus, hostmetrics]
          processors: [memory_limiter, resource, attributes, batch]
          exporters: [prometheus, logging]
        
        # Traces pipeline
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource, attributes, batch]
          exporters: [otlp/tempo, logging]
        
        # Logs pipeline (future)
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource, attributes, batch]
          exporters: [logging]
